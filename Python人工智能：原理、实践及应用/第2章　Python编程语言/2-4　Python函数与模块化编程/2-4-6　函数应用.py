"""
【例2-14】　日历的输出。通过输出年份和月份，显示出指定月份的日历。
运行效果如图2-14所示。
图2-14 日历效果图
案例分析：
（1）想要显示日历，首先要知道是哪一年的，而年份又分闰年和平年。通过一个函数实现闰年的判断。当年份能被4整除且不能被100整除时、年份能被400整除时为闰年，其余为平年。定义函数的返回值：为闰年则返回True，为平年则返回False。
（2）需要知道当前月有几天。通过定义函数获取每个月的天数。当为闰年时，2月为29天，而当为平年时，2月为28天。其他月份中：1、3、5、7、8、10、12为31天，4、6、9、11为30天。
（3）确定一个起始的参考年份，如1990年，当前年的1月1日为星期一。定义一个函数，获取指定年、月到参考年、月的总天数，以确定每个月的1号是星期几。设定天数初始值为0，先判断当年是否为闰年，如果为闰年，则天数加366天，如果为平年，则天数加365天。再加上当前年从1月到指定月份的天数。
（4）在主函数中先输入年份和月份，再调用函数。由于要将日期按星期进行排列，一周为七天，需定义一个计数器，初始值为0，用来控制输出换行，当数值能被7整除时则换行。
再确定日历的输出顺序，必须先确定1号的星期位置。如果按星期排在第一个，则直接用总天数对7整除取余数（total_days（year，month）%7）。如果星期日排在第一个，则将总天数加1再对7整除取余数
（（total_days（year，month）+1）%7）。1号之前的星期位置需要空出来，所以直接输出间隔符，每输出一个间隔符，都需要对计数器加1。
最后从1号按顺序输出日期，每输出一个日期，计数器就加1，当计数器的值能被7整除时，则换行，代码如下：
"""
# 判断是否为闰年
def leap_year(year):
    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:  # 闰年
        return True
    else:
        return False  # 平年
# 获取每个月的天数
def month_days(year, month):
    if month == 2:
        if leap_year(year):
            return 29
        else:
            return 28
    elif month in [1, 3, 5, 7, 8, 10, 12]:
        return 31
    else:
        return 30
# 获取指定年月(当前年)到参考年月的总天数
def total_days(year, month):
    total = 0
    for i in range(1990, year):
        if leap_year(i):
            total += 366
        else:
            total += 365
    for i in range(1, month):
        total += month_days(year, i)
    return total
# 主函数
if __name__ == '__main__':
    year = 2023
    month = 9
    print('日\t一\t二\t三\t四\t五\t六')
    print("-" * 50)
    count = 0
    # 当前月份1号是星期几,1号之前的空位
    # 如果星期日排在第一个，则将总天数加1再对7整除取余数（（total_days（year，month）+1） %7）因为1990年的1月1日为星期一
    # 1号之前的星期位置需要空出来，所以直接输出间隔符，每输出一个间隔符，都需要对计数器加1。
    td = (total_days(year, month)+1)
    b = td % 7
    for i in range(b):
        print('\t', end='')
        count += 1
    # 输出日历
    for i in range(1, month_days(year, month)+1):  # 最后从1号按顺序输出日期，每输出一个日期，计数器就加1，当计数器的值能被7整除时，则换行
        print(i, '\t', end='')
        count += 1
        if count % 7 == 0:
            print()
