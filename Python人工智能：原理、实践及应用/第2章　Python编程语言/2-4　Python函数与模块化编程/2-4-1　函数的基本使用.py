"""
如果一个软件功能比较强大，相对应的代码也会比较庞大，以目前全球最大的计算机软件提供商微软为例，在Windows 2000的研发过程中，微软投入了300多名软件工程师和系统测试人员，合计写出约5000万行代码。
可以想象一下，如果把所有的代码都放在一个主函数中，代码编写就无法分工，编写任务基本也不可能完成，同时也会产生代码过长、容易出错和可读性差等问题。
因此，必须有一种机制，能将代码划分为若干模块，每一模块可相对独立地实现某一功能，这就是函数。
另外，有部分功能经常被使用，但是不可能每次使用的时候都把相应功能的代码全部写一遍，这样会造成代码大量冗余。
解决方法就是将这样的功能封装起来，每次需要使用这个功能时，通过调用函数就可实现。
总体来说，函数的两个主要目的是：
降低编程难度和实现代码复用。
函数是一种功能抽象，复用它可以将一个复杂的大问题分解成一系列简单的小问题，同时，小问题还可以继续划分成更小的问题，是一种分而治之的思想应用。
当每个小问题都细化到足够简单时，为每个小问题编写程序，并通过函数封装，由小问题的解决到整个大问题的解决。这就是一种自顶向下的程序设计思想。
"""
# 2.4.1 函数的基本使用
"""
【例2-13】 数学计算，编写程序完成公式计算：
，其中m和n的值由键盘输入。
案例分析：从这个公式中，我们可以看到要反复求各数的阶乘，如果直接用代码编写，需要将求阶乘的代码写3次，这必然会造成大量代码冗余，
因此我们可以将求阶乘的功能代码封装起来从而得到一个函数，每次求阶乘时，只需通过修改参数即可调用函数。代码如下：
"""
# 自定义阶乘函数fact()用于求参数a的阶乘,返回值为a的阶乘
def fact(a):
    f = 1
    for i in range(1, a + 1):
        f *= i
    return f
n = eval(input("请输入n的值："))
m = eval(input("请输入m的值："))
c = fact(n) / (fact(m) * fact(n - m))
print("C(%d,%d)=%d" % (n, m, c))

# 1．函数的定义
"""
函数的定义即函数功能的实现过程，包含函数头与函数体两部分。为提高程序的可读性，函数定义之前，一般以注释形式标明函数接口信息。从上面的案例中，我们可以看出函数的定义格式：
def函数名(参数1,参数2,…):
    函数体
return返回值列表
def：关键字，标志着函数的开始。
函数名：函数唯一的标识，可以是任何有效的Python标识符，命名方式遵循变量的命名规则。
参数：参数列表中的参数是形式参数，简称为“形参”，是调用该函数时传递给它的值，可以是0个，也可以是一个或多个。当传递多个参数时，各参数由逗号分隔。没有参数也需要保留括号。形参只在函数体中有效。
冒号：用于标记函数体的开始。
函数体：函数每次被调用时执行的代码，由一行或多行代码组成。
return：标志函数的结束，将返回值赋给函数的调用者。若是没有返回值，则无须保留return语句，在函数体结束位置将控制权返回给调用者。
"""
# 2．函数的调用
"""
函数被定义好之后不会立即执行，只有被程序调用时才会执行。从案例中我们可以看到函数调用的语句是：c=fact（n）/（fact（m）×fact（n-m））。由此可看出调用函数的基本格式：
 函数名(参数列表)
调用时，参数列表中给出实际要传入函数内部的参数，这类参数称为实际参数，即“实参”。实参可以是变量、常量、表达式、函数等。
在程序执行过程中，调用函数其实分成了4个步骤：
（1）调用程序在调用处暂停执行。
（2）在调用时将实参复制给函数的形参。
（3）执行函数体语句。
（4）函数结束时给出返回值，程序回到调用前暂停处继续执行。
具体实现过程如图2-12所示。
图2-12 函数调用与返回过程
主程序先按顺序执行到c=fact（n）/（fact（m）∗fact（n-m））时，暂停，转到函数fact（）。
将实参n复制后传递给形参a。
执行函数fact（）中的语句。
函 数 执 行 结 束 时 ， 得 到 返 回 值 f ， 回 到 主 程 序 c=fact （ n ） /（fact（m）∗fact（n-m）），得到了fact（n）的值。
以同样的方式再次暂停，调用函数求得fact（m）、fact（n-m）的值。
回到主程序c=fact（n）/（fact（m）∗fact（n-m）），继续往下执行print（c）。至此，整个程序执行完毕。
"""