# 集合类型
"""
集合类型是一个元素的集合，元素之间无序，集合中每个元素值都具有唯一性。集合类型就像一个带有标签的容器。
"""
# 3．集合类型
"""
集合类型与数学中的集合概念一致，即包含0个或多个数据项的无序组合。
集合中的元素不可重复，元素类型只能是固定数据类型，不能是可变数据类型。
如整数、浮点数、字符串、元组等可以作为集合的数据项，而列表、字典和集合类型则不能作为集合的元素出现。

集合是无序的组合，没有索引和位置的概念，不能分片，集合中的元素可以动态增加或删除。
集合用大括号{}表示，各元素之间用逗号隔开，可以用赋值语句生成一个大集合。
也可以用set（）函数进行集合的创建，输入的参数可以是任何组合数据类型，返回结果是一个无重复且排序任意的集合。
由于集合中的元素都是唯一的，可以使用集合类型过滤重复元素，代码如下：
注意：空集合只能由set（）函数创建。空{}创建的集合默认为字典类型。
"""
set1 = {1, 2, 3, 4, 5, 'python'}  # 创建集合
set2 = set([1, 2, 3, 4, 5, 'python'])  # 用函数set（）创建集合,参数是列表
set3 = set((1, 2, 3, 4, 5, 'python'))  # 用函数set（）创建集合,参数是元组
set4 = set('python')  # 用函数set（）创建集合,参数是字符串
set5 = set()  # 创建空集合
print(set1, set2, set3, set4, set5)  # 输出：{1, 2, 3, 4, 5, 'python'} {1, 2, 3, 4, 5, 'python'} {1, 2, 3, 4, 5, 'python'} {'n', 'h', 'y', 'p', 't', 'o'} set()
# 集合类型的操作
# 1）集合的交集、并集、差集
"""
集合类型的交集、并集、差集等操作与数学中的集合操作一致，代码如下：
"""
set1 = {1, 2, 3, 4, 5, 'python'}  # 创建集合
set2 = {3, 4, 5, 6, 7, 'python'}  # 创建集合
print(set1 & set2)  # 输出：{3, 4, 5, 'python'}    # 交集
print(set1 | set2)  # 输出：{1, 2, 3, 4, 5, 6, 7, 'python'}    # 并集
print(set1 - set2)  # 输出：{1, 2} # 差集
print(set2 - set1)  # 输出：{6, 7} # 差集
print(set1 ^ set2)  # 输出：{1, 2, 6, 7}   # 对称差集

# 2）集合的增删改查
"""
集合类型的增删改查操作与列表类型类似，代码如下：
"""
set1 = {1, 2, 3, 4, 5, 'python'}  # 创建集合
set1.add(6)  # 添加元素
print(set1)  # 输出：{1, 2, 3, 4, 5, 6, 'python'}
set1.remove(6)  # 删除元素
print(set1)  # 输出：{1, 2, 3, 4, 5, 'python'}
set1.update([6, 7, 8])  # 添加多个元素
print(set1)  # 输出：{1, 2, 3, 4, 5, 6, 7, 8, 'python'}
set1.discard(8)  # 删除元素
print(set1)  # 输出：{1, 2, 3, 4, 5, 6, 7, 'python'}
set1.pop()  # 删除元素  # 集合类型没有索引，删除元素时随机删除
print(set1)  # 输出：{2, 3, 4, 5, 6, 7, 'python'}
set1.clear()  # 清空集合
print(set1)  # 输出：set()
# 3）集合元素遍历
"""
集合类型的元素遍历与列表类型类似，代码如下：
"""
set1 = {1, 2, 3, 4, 5, 'python'}  # 创建集合
for item in set1:  # 遍历集合
    print(item, end=' ')  # 输出：1 2 3 4 5 python
# 4）集合类型的转换
"""
集合类型与列表类型的转换，代码如下：
"""
set1 = {1, 2, 3, 4, 5, 'python'}  # 创建集合
list1 = list(set1)  # 集合转换为列表
print(list1)  # 输出：[1, 2, 3, 4, 5, 'python']
tuple1 = tuple(set1)  # 集合转换为元组
print(tuple1)  # 输出：(1, 2, 3, 4, 5, 'python')
# 5）集合类型的应用
"""
集合类型的应用主要是对数据去重，代码如下：
"""
list1 = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]  # 创建列表
set1 = set(list1)  # 列表转换为集合
print(set1)  # 输出：{1, 2, 3, 4, 5}
list2 = list(set1)  # 集合转换为列表
print(list2)  # 输出：[1, 2, 3, 4, 5]