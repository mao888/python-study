# 映射类型
"""
映射类型是“键-值”数据项的集合，每个元素都是一个键-值对，表示为（key，value），其中key具有唯一性。
映射类型就像一个“标签收纳盒”，给每个数据贴上唯一的标签，可以通过具有特定意义的名字或记
号来获得数据。如现实生活中的字典，可以通过标签（即关键字）来索引数据。

映射类型是键-值数据项的组合，每一个元素都是一个键-值对，即元素是（key，value），元素之间是无序的。键-值对（key，value）是一种二元关系，源于属性和值的映射关系。
键（key）表示一个属性，也可理解为一个类别或项目，值（value）是属性的内容，键-值对刻画了一个属性和它的值。键-值对将映射关系结构化，用于存储和表达。
在列表中，存储和检索数据可以通过整数的索引实现，但是在很多应用中需要更灵活的信息查找方式，
例如在检索学生或员工信息时，经常基于学号或身份证号码进行查找，而不是基于信息存储的序号进行查找。
在编程术语中，根据一个信息查找另一个信息的方式构成了键-值对，它表示索引用的键和对应的值构成的成对关系，即通过一个特定的键（学号或身份证号）访问值（学生信息）。
在实际应用中有很多键-值对的案例，如通信录中姓名和电话号码、用户信息中用户名与密码、邮政编码与运输成本、国家名称与首都等。
这种通过任意键信息查找一组数据中值信息的过程称为映射，在Python中，映射类型主要以字典（dict）进行体现。
"""
# 1）字典创建
"""
字典是包含0个或多个键-值对的无序集合，没有长度限制，可以根据键索引值的内容，且键具有唯一性。
Python中可以通过函数dict（）来创建空字典，也可以通过大括号{}来创建。代码格式如下：
"""
dict1 = dict()  # 创建空字典
dict2 = dict(one=1, two=2, three=3)  # 创建字典
dict3 = dict([('one', 1), ('two', 2), ('three', 3)])  # 创建字典
dict4 = {'one': 1, 'two': 2, 'three': 3}  # 创建字典
dict5 = {(1, 2, 3): 'tuple', 1.2: 'float', 'string': 'string'}  # 创建字典
dict6 = dict(zip(['one', 'two', 'three'], [1, 2, 3]))  # 创建字典
print(dict1, dict2, dict3, dict4, dict5, dict6)
"""
注意：字典输出数据的顺序可能与创建之初的顺序不一致。其原因是字典是集合类型的延续，所以各元素之间没有顺序之分，如果想保持一个集合中各元素的顺序，需要使用列表。
如果要访问元素的值，则可使用“字典变量[key]”的形式，代码如下：
"""
print(dict2['one'])  # 输出：1
"""
字典中的元素是可以动态修改的，添加元素和修改元素都是通过对“字典变量[key]”赋值方式实现：字典变量[key]=值。如添加一个元素，代码如下：
"""
dict2['one'] = 'one'  # 添加元素
print(dict2)  # 输出：{'one': 'one', 'two': 2, 'three': 3}
"""
总体来说，字典是存储可变数量键-值对的数据结构，键和值可以是任意数据类型，包括程序自定义的类型。Python字典效率非常高，甚至可以存储几十万项内容。
"""
# 2）字典操作
"""
字典在Python内容中已采用面向对象方式实现，因此使用对应的方法时，采用a.b（）格式。Python中字典常用函数和方法见表2-14。

如果希望以keys（）、values（）、items（）方法返回列表类型，可用list（）函数进行转换。
"""
dict1 = {'one': 1, 'two': 2, 'three': 3}  # 创建字典
print(dict1.keys())  # 输出：dict_keys(['one', 'two', 'three'])
print(dict1.values())  # 输出：dict_values([1, 2, 3])
print(dict1.items())  # 输出：dict_items([('one', 1), ('two', 2), ('three', 3)])
print(list(dict1.keys()))  # 输出：['one', 'two', 'three']
print(list(dict1.values()))  # 输出：[1, 2, 3]
print(list(dict1.items()))  # 输出：[('one', 1), ('two', 2), ('three', 3)]
print(dict1.get('one', 'two'))  # 输出：1  # 如果键不存在，则返回默认值
print(dict1.get('four', 'two'))  # 输出：two  # 如果键不存在，则返回默认值
print(dict1.pop('one', 'ss'))  # 输出：1  # 删除键值对，并返回值
print(dict1)  # 输出：{'two': 2, 'three': 3}
"""
字典类型的增删改查操作与列表类型类似，代码如下：
"""
dict1 = {'one': 1, 'two': 2, 'three': 3}  # 创建字典
dict1['four'] = 4  # 添加元素
print(dict1)  # 输出：{'one': 1, 'two': 2, 'three': 3, 'four': 4}
dict1['one'] = 0  # 修改元素
print(dict1)  # 输出：{'one': 0, 'two': 2, 'three': 3, 'four': 4}
del dict1['one']  # 删除元素
print(dict1)  # 输出：{'two': 2, 'three': 3, 'four': 4}
dict1.clear()  # 清空字典
print(dict1)  # 输出：{}

# 3）字典遍历
"""
与其他组合类型一样，字典的遍历可以使用for-in语句，基本语法格式如下：
"""
dict1 = {'one': 1, 'two': 2, 'three': 3}  # 创建字典
for key in dict1:  # 遍历字典
    print(key, dict1[key], end=' ')  # 输出：one 1 two 2 three 3
"""
如果对元素访问时不需要删除操作，则可直接遍历列表。
如果对元素访问时涉及删除或改变元素位置等操作，则应先对原列表进行复制，在复制的列表中遍历，而在原列表中操作，这样可以保证每个元素都能被遍历并进行操作。
下面通过几个案例来实践。
"""
"""
【例2-9】　计算消费额
小明在咖啡店里点了双人下午套餐，包含两杯咖啡和两份点心：一杯卡布奇诺32元，一杯摩卡30元，一份抹茶蛋糕28元，一份布朗尼蛋糕36元，请帮忙用Python计算并输出消费总额。
案例分析：
可将每样物品与其价格组成一对键-值对，将套餐内容变成一个字典。对字典进行遍历，获取每个键对应的值，将值进行累加即可得到总消费额，求解代码如下：
"""