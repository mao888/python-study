# Python语言提供了3种数字类型：整数、浮点数、复数，以及一种字符串类型。

# 1．整数
'''
二进制：以0B或0b开头；八进制：以0O或0o开头；十六进制：以0X或0x开头。
'''
a = 0b101   # 二进制 1*2^2+0*2^1+1*2^0=5
print('a的十进制表示:%d' % a)
b = 0o101   # 八进制 1*8^2+0*8^1+1*8^0=65
print('a的十进制表示:%d' % b)
c = 0x101   # 十六进制 1*16^2+0*16^1+1*16^0=257
print('a的十进制表示:%d' % c)
d = 101    # 十进制 1*10^2+0*10^1+1*10^0=101
print('d的十进制表示:%d' % d)
print('-'*50)

'''
不同的进制之间还可以通过不同的函数实现相互转换：
bin（x）：将数值x转换为二进制。
oct（x）：将数值x转换为八进制。
hex（x）：将数值x转换为十六进制。
int（x）：将字符串x转换为整数。
'''
a = 10
print('a的二进制为', bin(a))   # 0b1010
print('a的八进制为', oct(a))  # 0o12
print('a的十六进制为', hex(a))    # 0xa
print('二进制101的整数值为', int('101', 2))     # 5
print('-'*50)

# 2．浮点数
'''
1. Python的浮点数一般以十进制表示，由整数和小数部分组成，如0.0，2.34，0.00000051，3.14159都是浮点数。
2. 对于非常大或者非常小的浮点数可以用科学记数法表示。如：0.00000051可以表示成5.1E-7，314000可以表示成3.14E5。
3. Python中的浮点数是双精度的，每个浮点数占8个字节（64位），52位存储尾数，11位存储阶码，1位存储符号，故浮点数的取值范围为-1.8E308～1.8E308。超出这个范围将视为无穷大（inf）或者无穷小（-inf）。
4. Python中最长可以输出浮点数的17位数字，但是计算机只能保证15位数字的精度，对于超出17位的浮点数会产生截断。一旦产生截断，结果就会产生误差。如平时我们都会认为0.1+0.2的结果是0.3，但是实际执行的结果却是0.30000000000000004
'''

# 3．复数
'''
1. 格式为2+3j和5.6+7.8j这样的数据称为复数。一个复数由“实部”和“虚部”两部分组成，实部是一个实数，虚部是一个实数后加j或J组成，虚部不能单独存在
2. 获取一个复数实部的方法是调用属性real，获取虚部的方法是调用属性imag。
3. 将一个数据转换为复数的函数是complex（），该函数的参数可以是一个实数，也可以是一个字符串，如果是字符串，该字符串必须符合复数的格式，否则会报错。
'''
a = complex(2, 4)
b = 6
print(a)    # (2+4j)
print('a的实部是:', a.real, 'a的虚部是:', a.imag)   # a的实部是: 2.0 a的虚部是: 4.0
print(complex(b))   # (6+0j)
# 分隔符
print('-'*50)