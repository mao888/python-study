# Python语言提供了3种数字类型：整数、浮点数、复数，以及一种字符串类型。

# 1．整数
'''
二进制：以0B或0b开头；八进制：以0O或0o开头；十六进制：以0X或0x开头。
'''
a = 0b101  # 二进制 1*2^2+0*2^1+1*2^0=5
print('a的十进制表示:%d' % a)
b = 0o101  # 八进制 1*8^2+0*8^1+1*8^0=65
print('a的十进制表示:%d' % b)
c = 0x101  # 十六进制 1*16^2+0*16^1+1*16^0=257
print('a的十进制表示:%d' % c)
d = 101  # 十进制 1*10^2+0*10^1+1*10^0=101
print('d的十进制表示:%d' % d)
print('-' * 50)

'''
不同的进制之间还可以通过不同的函数实现相互转换：
bin（x）：将数值x转换为二进制。
oct（x）：将数值x转换为八进制。
hex（x）：将数值x转换为十六进制。
int（x）：将字符串x转换为整数。
'''
a = 10
print('a的二进制为', bin(a))  # 0b1010
print('a的八进制为', oct(a))  # 0o12
print('a的十六进制为', hex(a))  # 0xa
print('二进制101的整数值为', int('101', 2))  # 5
print('-' * 50)

# 2．浮点数
'''
1. Python的浮点数一般以十进制表示，由整数和小数部分组成，如0.0，2.34，0.00000051，3.14159都是浮点数。
2. 对于非常大或者非常小的浮点数可以用科学记数法表示。如：0.00000051可以表示成5.1E-7，314000可以表示成3.14E5。
3. Python中的浮点数是双精度的，每个浮点数占8个字节（64位），52位存储尾数，11位存储阶码，1位存储符号，故浮点数的取值范围为-1.8E308～1.8E308。超出这个范围将视为无穷大（inf）或者无穷小（-inf）。
4. Python中最长可以输出浮点数的17位数字，但是计算机只能保证15位数字的精度，对于超出17位的浮点数会产生截断。一旦产生截断，结果就会产生误差。如平时我们都会认为0.1+0.2的结果是0.3，但是实际执行的结果却是0.30000000000000004
'''

# 3．复数
'''
1. 格式为2+3j和5.6+7.8j这样的数据称为复数。一个复数由“实部”和“虚部”两部分组成，实部是一个实数，虚部是一个实数后加j或J组成，虚部不能单独存在
2. 获取一个复数实部的方法是调用属性real，获取虚部的方法是调用属性imag。
3. 将一个数据转换为复数的函数是complex（），该函数的参数可以是一个实数，也可以是一个字符串，如果是字符串，该字符串必须符合复数的格式，否则会报错。
'''
a = complex(2, 4)
b = 6
print(a)  # (2+4j)
print('a的实部是:', a.real, 'a的虚部是:', a.imag)  # a的实部是: 2.0 a的虚部是: 4.0
print(complex(b))  # (6+0j)
# 分隔符
print('-' * 50)

# 4．布尔型
'''
1. 布尔型只有True和False两个值，本质上来说，布尔型其实是一种特殊的整数，True对应1，False对应0。
任何对象都具有布尔属性，在Python中，以下数据的值均为False：
（1）None。
（2）False。
（3）任何为0的数字类型：0、0.0、0j。
（4）任何空字符、空列表、空字典：＂＂、（）、[ ]、{}。
（5）用户定义的类实例，如果类中定义了__bool__（）或者__len__（）方法，并且方法返回0，或者布尔值False。
'''
print(bool())
print(bool(''))
print(bool(0))
print(bool([]))
print('-' * 50)

# 5．运算符
'''
数值运算符是一类对数值型操作数有效的运算符。按照不同的功能，又可以分成算术运算符、赋值运算符、比较运算符、逻辑运算符等。
'''
# 1）算术运算符
# （1）一元操作符。
x = 2
y = 9
print(x / y)  # 0.2222222222222222
print(x // y)  # 0
print(x % y)  # 2
print(x ** y)  # 512
print(x ** 0.5)  # 1.4142135623730951
print('-' * 50)

# （2）二元运算符
x += y
print(x)  # 11
x -= y
print(x)  # 2
x *= y
print(x)  # 18
x /= y
print(x)  # 2.0
x //= y
print(x)  # 0.0
x %= y
print(x)  # 0.0
x **= y
print(x)  # 0.0
print('-' * 50)

# Python中的算术运算符既支持对相同类型的数值进行运算，也支持对不同类型的数值进行混合运算。
# 在混合运算时，Python会强制将数值进行临时类型转换。遵循原则是将简单的数据类型转换为相对复杂的那一种数据类型。
'''
布尔类型进行算术运算时，会将值视为0或1。
整型与浮点型进行混合运算时，会将整型转换为浮点型。
其他类型与复数运算时，会将其他类型转换为复数。
'''
print(1 + True)  # 2
print(1 * 2.0)  # 2.0
print(1 + (2 + 3j))  # (3+3j)
print('-' * 50)

# 2）比较运算符
'''
比较运算符是比较符号左右两边的操作数，运算结果是一个布尔值。
'''

# 3）逻辑运算符
'''
逻辑运算符可以把多个条件表达式连接起来，形成更为复杂的条件，
'''

# 4）运算符优先级
'''
对于表达式（2+3）∗4-5∗2，运算的顺序是什么样的呢？小学数学告诉我们应该先算括号内的，再算括号外的，先算乘除，再算加减。这种先后顺序就是运算符的优先级，乘、除的优先级高于加、减，括号的优先级高于乘、除。
常见运算符优先级由高到低的顺序如下：
乘方：∗∗，
按位取反：～；
正负号：+x；-x，乘、除、求余：∗、/、%；加、减：+、-；
比较：＜、＜=、＞、＞=、!=、==；
成员判断：not in、in；逻辑运算：not、and、or。
一般来说，同一优先级的运算符在运算时是按照从左往右的顺序执行，如2+3-4的运算顺序是：解释器先运算2+3，得到结果5再与运算符结合执行5-4。
而赋值运算符的结合则相反，按照从右往左的顺序，如x=y=z，会先将z的值赋给y，再将y的值赋给x。
'''

# 6．字符串
#   1）字符串表示
'''
Python中的字符串是由一对单引号（''）、一对双引号（＂＂）或一对三引号（''''''）括起来的字符序列。
单引号：单引号括起来的单行，可以使用双引号作为字符串的一部分。
双号号：双引号括起来的单行，可以用单引号作为字符串的一部分。三引号：三引号括起来的多行，可以用单引号、双引号作为字符串的
一部分，也可以换行。
如果非要在单引号（或双引号）括起来的字符串中包含单引号（或双引号），可使用转义字符反斜杠（\）对字符串中的单引号（或双引号）进行转义处理，使得转义字符与特殊字符组成新的含义。

在字符串定义时需要遵守以下几条规则：
（1）字符串可以使用单引号或双引号来定义，但是最好在一个文件中统一使用同一种，避免混合使用的情况。
（2）如果在字符串中可能包含某种引号时，那么优先使用另一种形式的引号来定义字符串，尽量不使用转义字符。
Python提供了很多字符串的基本操作符，
'''
x = 'I\'m a student.'
y = "I'm a student."
print(x)  # I'm a student.
print(y)  # I'm a student.
print(x + y)  # I'm a student.I'm a student.
print(x * 2)  # I'm a student.I'm a student.
print(x in y)  # True
print('-' * 50)

#   2）字符串索引
'''
字符串中的多个字符都会按顺序给出一个编号，这个编号就是索引。如s='Python'，字母'P'的编号为0

Python中的字符串，我们可以通过索引取出其中的一个字符或一段字符子串，但是不支持动态修改。如s[1]可取出字符'y'。但是如果通过s[1]='a'将'y'修改成'a'，则是非法操作。
在字符串中通过索引取出一个或一段字符子串的操作非常灵活，我们把取其中一段的操作称为切片。切片的操作非常多样，具体如下：
s[n：m]：表示从字符串s中取索引号从n到m-1的字符子串，其中不包含索引号m的字符。
s[n：]：省略结束索引号，表示切取索引号从n到最后一个字符的子串。
s[：m]：省略开始索引号，表示切取索引号从0到索引号为m-1的子串。
s[-n：-m]：表示从字符串s中切取索引号从倒数n到倒数m-1的字符子串。
s[：：]：省略开始和结束索引号，表示切取整个字符串。
s[：：-1]：获得整个字符串的逆序。
'''
s = 'Python'
print(s[0])  # P
print(s[2:6])  # thon
print(s[-5:-2])  # yth
print(s[::])  # Python
print(s[::-1])  # nohtyP
print('-' * 50)

#   3）字符串的处理函数
print(len(s))  # 6
print(str(1))  # 1
print(chr(65))  # A
print(ord('A'))  # 65
print(hex(10))  # 0xa  十六进制
print(oct(10))  # 0o12   八进制
print(bin(10))  # 0b1010 二进制
print('-' * 50)

#   4）字符串的处理方法
'''
在Python的解释器内部，所有数据类型都采用面向对象的方式实现，封装成一个类。
字符串就是其中的一个类。
每一个类里面都有许多自己的方法和属性，想要使用类的方法和属性，需要用 a . b （）的方式进行调用，
其中a指明相应类创建的对象，例如我们创建一个字符串变量s='Python'，变量s就是一个字符串类的实例化对象。
b（）指的是这个类中相应的方法。
类里的方法其实就是根据特定功能创建的函数，对外调用时我们一般称为“方法”，常用字符串处理方法如表2-9所示
'''
s = 'Python'
print(s.capitalize())  # Python 首字母大写
print(s.upper())  # PYTHON
print(s.lower())  # python
print(s.swapcase())  # pYTHON
print(s.title())  # Python
print(s.center(10))  # Python
print(s.ljust(10))  # Python
print(s.rjust(10))  # Python
print(s.zfill(10))  # 0000Python
print(s.count('P'))  # 1
print(s.find('P'))  # 0
print(s.rfind('P'))  # 0
print(s.index('P'))  # 0
print(s.rindex('P'))  # 0
print(s.isalnum())  # True
print(s.isalpha())  # True
print(s.isdigit())  # False
print(s.islower())  # False
print(s.isupper())  # False
print(s.isspace())  # False
print(s.istitle())  # True
print(s.startswith('P'))  # True
print(s.endswith('n'))  # True
print(s.replace('P', 'p'))  # python
print(s.split('P'))  # ['', 'ython']
print(s.split('P', 1))  # ['', 'ython']
print(s.splitlines())  # ['Python']
print(s.strip())  # Python
print(s.lstrip())  # Python
print('-' * 50)

#   5）字符串的格式化方法
'''
字符串可以通过format（）方法进行格式化处理。
'''
'''
例如小明同学想用一个程序输出他每天的运动量：2019-12-12：跑步1小时，行程9.85千米。
下画线中的内容每天都会发生改变，我们可以用特定的函数运算得到结果，填充到指定的位置，最终形成格式化的字符串。
Python提供了两种字符串格式化方法，一种是类C语言中printf（）函数的格式化方法，另一种采用专门的format（）格式化方法。
'''
'''
（1）使用%符号进行格式化
使用%符号对字符串格式化的形式：'%[对齐][正号][0][宽度][.精度]指定类型'%变量。
基本思想是：第一个%号表示格式开始标志，单引号外面的%后面跟待格式化的变量。
[对齐]：-：左对齐，+：右对齐
（2）使用format（）方法进行格式化
模板字符串由一系列槽组成，用来控制修改字符串中嵌入值出现的位置，其基本思想是将format（）方法中逗号分隔的参数按照逗号关系替换到模板字符串的槽中。
槽用大括号{}表示，如果大括号中没有序号，则按照出现的顺序替换，格式控制如表2-10所示。
format（）方法中的槽除了包含参数序号，还可以包含格式控制的信息，具体格式信息如下：
参数的序号是从0开始编号的，调用format（）方法后会得到一个新的字符串。想输出小明同学的运动量，可用变量来存储具体数值，代码如下：
'''
day = '2019-12-12'
hours = 1
dis = 9.85
print('%s:跑步%d小时,行程%.2f千米' % (day, hours, dis))
print('{}:跑步{}小时,行程{}千米'.format(day, hours, dis))
print('{0}:跑步{1}小时,行程{2}千米'.format(day, hours, dis))
