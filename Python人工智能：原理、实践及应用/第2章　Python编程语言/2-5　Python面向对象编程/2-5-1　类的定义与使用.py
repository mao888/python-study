# 2.5　Python面向对象编程
"""
在现实世界中存在各种不同形态的事物，这些事物之间存在着各种各样的联系。在程序中使用对象来映射现实中的事物，使用对象之间的关系来描述事物之间的联系，这种思想就是面向对象。
“万物皆对象”，对象是一个抽象概念，表示任意存在的事物，通常将对象划分为两个部分，即静态部分与动态部分。静态部分被称为“属性”，任何对象都具备自身属性，这些属性不仅是客观存在的，而且是不能被忽视的，如人的性别。动态部分是对象的行为，即对象执行的动作，如人的行走。
类是封装对象的属性和行为的载体，反过来说，具有相同属性和行为的一类实体被称为类，在Python中，类是一种抽象概念，如定义一个大雁类（Geese），在该类中，可以定义每个对象共有的属性和方法，而一只要从北方飞往南方的大雁则是大雁类的一个对象，对象是类的实例。
面向对象程序设计具有三大基本特征：封装、继承、多态。封装是面向对象编程的核心思想，将对象的属性和行为封装起来，而将对象的属性和行为封装起来的载体就是类，类通常对客户隐藏其实现细节，这就是封装思想。在Python中，继承是实现重复利用的重要手段，子类通过继承复用了父类的属性和行为的同时，又添加了子类特有的属性和行为。多态是将父类对象应用于子类的特征。
面向过程思想在早期开发语言中被大量使用，它是分析出解决问题的步骤，然后用函数将这些步骤一一实现，使用的时候另行调用。面向过程只考虑在函数中封装代码逻辑，而不考虑函数的归属关系。
面向对象是把解决问题的事物提取为多个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决问题的过程中所发生的行为。面向对象是一个更大的封装，根据对象职责明确函数的归属关系。
例如如何把一头大象放进冰箱：
在面向过程程序设计中，程序员操作并完成一个个任务：一、打开冰箱门；二、把大象装进去；三、关上冰箱门。
在面向对象程序设计中，先把冰箱看成一个对象，对象自己完成三个动作：一、冰箱门打开；二、大象装进去；三、冰箱门关上。
"""
# 2.5.1　类的定义与使用
# 1．类的定义
"""
在Python中，类表示具有相同属性和方法的对象的集合，在使用类时，需要先定义类，然后再创建类的实例，类的定义使用class关键字实现，语法如下；
class类名(父类):
    属性名=属性值
    def方法名():
        方法体
定义一个冰箱类代码如下：
"""
class Fridge():
    def open(self):
        print('打开冰箱门')
    def pack(self, goods):
        self.goods = goods
        print('将%s装进冰箱' % self.goods)
    def close(self):
        print('关上冰箱门')
# 2．类的使用
"""
对象是类的实例化，类是对象的抽象，即创建对象的模板。创建类之后，需要通过创建对象来使用类，格式如下：
对象名=类名()
"""
"""
按上面的冰箱类来创建一个实际的冰箱对象，代码如下：
"""
fridge1=Fridge()